"""add organizations and organization_users tables

Revision ID: f4314f251172
Revises: 001_add_folders
Create Date: 2025-08-24 15:01:29.478353

"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "f4314f251172"
down_revision = "001_add_folders"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "organizations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organizations")),
    )
    op.create_table(
        "organization_users",
        sa.Column("organization_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("is_owner", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name=op.f("fk_organization_users_organization_id_organizations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_organization_users_user_id_users")
        ),
        sa.PrimaryKeyConstraint(
            "organization_id", "user_id", name=op.f("pk_organization_users")
        ),
    )

    # Data migration: Create organization for each existing user
    from sqlalchemy.sql import text

    connection = op.get_bind()

    # Get all users
    users = connection.execute(text("SELECT id, email FROM users")).fetchall()

    for user in users:
        user_id, email = user
        # Create organization name from email (fallback to 'User Organization' if no email)
        org_name = (
            f"{email.split('@')[0]} organization" if email else "User organization"
        )

        # Insert organization
        org_result = connection.execute(
            text(
                "INSERT INTO organizations (id, name, created_at) VALUES (gen_random_uuid(), :name, NOW()) RETURNING id"
            ),
            {"name": org_name},
        )
        org_id = org_result.fetchone()[0]

        # Link user to organization as owner
        connection.execute(
            text(
                "INSERT INTO organization_users (organization_id, user_id, is_owner, created_at) VALUES (:org_id, :user_id, true, NOW())"
            ),
            {"org_id": org_id, "user_id": user_id},
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("organization_users")
    op.drop_table("organizations")
    # ### end Alembic commands ###
