worker_processes 1;
error_log  stderr;
daemon off;
pid /tmp/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {

  client_body_temp_path /tmp/client_temp;
  proxy_temp_path       /tmp/proxy_temp_path;
  fastcgi_temp_path     /tmp/fastcgi_temp;
  uwsgi_temp_path       /tmp/uwsgi_temp;
  scgi_temp_path        /tmp/scgi_temp;

  include /etc/nginx/mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log stdout combined;
  sendfile on;

  upstream web_app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/web_app_server_gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:PORT fail_timeout=0;
  }

  upstream web_plantuml_app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/web_plantuml_app_server_gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:PORT fail_timeout=0;
  }


#   server {
#     # if no Host match, close the connection to prevent host spoofing
#     listen PORT default_server;
#     return 444;
#   }

  server {
    # use 'listen PORT deferred;' for Linux
    # use 'listen PORT accept_filter=httpready;' for FreeBSD
    listen PORT;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    # server_name example.com www.example.com;

    keepalive_timeout 5;

    # path for static files
    root /app/easy_diagrams/static/;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
    #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #   proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
        if ($request_method = PUT ) {
            # all PUT requests go to the plantuml instance
            proxy_pass http://web_plantuml_app_server;
        }
      proxy_pass http://web_app_server;
    }

    # error_page 500 502 503 504 /500.html;
    # location = /500.html {
    #   root /path/to/app/current/public;
    # }
  }
}
